#+title: Elfeed-Tube: Youtube On /Your/ Terms

Elfeed-Tube is an Emacs package for a richer, more interactive, noise-free and fully text-capable interface to your Youtube subscriptions and playlists using Elfeed, the RSS feed reader for Emacs. Think of it as supercharging Elfeed, or perhaps a taste of what the RSS/Atom protocol /could have become today/ if it had continue to evolve.

Elfeed-tube adds video descriptions, metadata and "live" transcripts (see below) for all Youtube videos entries in Elfeed. Here is what a video entry looks like:

Left: Elfeed. Right: Elfeed with Elfeed-Tube enabled.

* Features
** Fully asynchronous updates
Like Elfeed, Elfeed-tube fetches all data asynchronously. /Emacs will not block/. (This gets top billing because /I know the pain/.)

** Description and other metadata
Elfeed-tube adds the video duration, thumbnail and the video description to each Youtube entry in Elfeed. These elements can be turned off individually or tweaked to your liking.

For example, you may prefer to avoid including video descriptions because they often have linkspam, or prefer larger thumbnails.

** Transcripts

Youtube transcripts, including auto-generated ones, are automatically downloaded in your language of choice, formatted and displayed in your Elfeed buffers:

| English |
| Arabic  |

These transcripts are:
*** *Searchable and Org-linkable* (It's just an Emacs buffer)
You can text search your transcripts, link to them, quote from them, etc. Tagging support, date-oriented and metadata-based search is included as part of Elfeed.

When available (which is most of the time), the transcripts can be your primary entry point to the video. ("This could have been a palaver-free blog post.") This works especially well with technical content, talks and podcasts. 

However, there's more to them than just that. Transcripts are:

*** *Noise-free text* (No Ad reads)
There are no sponsor reads, ads or promotions in the transcript. These are automatically recognized and either greyed out or hidden from view:

Struck out here: An ad read section that you now don't have to read.

You can turn this off, or add more recognized sections to the strike-list, like intros and outros.

*** *Interactive*
Clicking on a segment opens the video at that time in your browser or video player of choice:

You can also move your cursor there and press return.
*** *"Live"*
With MPV integration (optional), you can seek to any time in the video by clicking at the corresponding text in your buffer, or jump to the currently playing segment in Emacs:

You can also follow along with the video in Emacs, and seeking through text is still available:

*** *Archivable and retrievable*
They're stored in your Elfeed database like any other text entry. Link or bookmark them in Emacs, refer to them in your other notes.

The Elfeed database is plain text, optionally gzipped. You can be sure that it will be readable decades from now.

*** Re-punctuated (Experimental)                                    :noexport:
There is currently experimental support for adding punctuation to (English-only) auto-generated captions. This uses a trained recurrent neural net provided by an online service. 

However For privacy reasons, this is turned off by default.

** Putting it together
Combined with the text manipulation capabilities of Emacs, you can combine these into an extremely powerful video watching interface. You can (partially) treat video like you treat text.

- I subscribe using Elfeed to playlists instead of channels, such as lecture video series. With the included transcripts and interactivity, I find this much better than storing some browser bookmarks or Org entries.
  
- You can narrow the buffer to just occurrences of a phrase in the transcript, then jump between where they appear in the video:
  
  In this example I use =consult-focus-lines= to show only lines of the transcript containing the phrase "".

- Want to jump to where you heard a podcast host talking about quadcopters? Search the buffer using Isearch in Emacs, then press the Enter key:

NOTE: It would be fantastic to be able to search for caption text across your entire Elfeed database, but Elfeed does not (yet) support full-text search. You'll have to search by supported fields instead, through a combination of the entry date range, tags, entry title and channel name text etc.

* Setup
This package is not available on MELPA yet. You can install it via Straight/ Quelpa or by cloning this repository.

Requirements:
- Emacs 27.1 or later
- Curl

Dependencies:
- Elfeed, the feed reader for Emacs.
- aio, the async-IO library for Emacs.
- (Optional) mpv: The mpv library for Emacs. For "live" transcript interaction.

** Set up with =use-package=
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube
    :straight t
    :after elfeed
    :config
    ;; Set to nil if you only want to view, not save,
    ;; data fetched by elfeed-tube
    (setq elfeed-tube-save-to-db-p t)
    (elfeed-tube-setup)
  
    :bind (:map elfeed-show-mode-map
           ("F" . elfeed-tube-fetch)
           ([remap save-buffer] . elfeed-tube-save)
           :map elfeed-search-mode-map
           ("F" . elfeed-tube-fetch)
           ([remap save-buffer] . elfeed-tube-save)))
#+END_SRC

If you want "live" captions and better MPV support:
#+BEGIN_SRC emacs-lisp
    (use-package mpv :ensure t :defer t)
    (use-package elfeed-tube-mpv
      :defer t
      :bind
      (:map elfeed-show-mode-map
            ("C-c C-f" . elfeed-tube-mpv-follow-mode)))
#+END_SRC

** TODO Set up without
* Usage
Elfeed-tube tries its best to work out of the box with no set up, but the first step below is unavoidable:

** I: Add youtube subscriptions to Elfeed
If you already have Youtube feeds in your Elfeed feed list, you can skip this step.
-----

Fortunately, Youtube still provides RSS feeds for channels and playlists. Unfortunately, Youtube doesn't make it easy to find them. 

Elfeed-tube provides a helper function: =M-x elfeed-tube-add-feeds= to find the RSS feed for a channel or playlist. When given one ore more Youtube video/playlist/channel URLs or plain text search terms, it will:

- Find the corresponding feeds and display a summary you can confirm
- Add the feeds to your list of elfeed-feeds.

https://user-images.githubusercontent.com/8607532/172195966-33089c16-57b1-4bbc-9bcc-71ac3d4338bc.mp4

(Finding the feeds is also asynchronous)

Examples (=RET= means pressing return):

+ =M-x elfeed-tube-add-feeds= =RET= =cgp grey, julia computing, https://www.youtube.com/playlist?list=PLZdCLR02grLqSy15ALLAZDU6LGpAJDrAQ= =RET=  
+ =M-x elfeed-tube-add-feeds= =RET= =https://www.youtube.com/watch?v=6etTERFUlUI= =RET=
(Be warned: URLs are safer, plain text queries might return the wrong channel!)
  
When called noninteractively, it can accept a list of URLs or queries:
#+BEGIN_SRC emacs-lisp
  (elfeed-tube-add-feed '("veritasium"
                          "https://www.youtube.com/playlist?list=PLEoMzSkcN8oMc34dTjyFmTUWbXTKrNfZA"
                          "quanta magazine"
                          "julia computing"
                          "https://www.youtube.com/watch?v=bSVfItpvG5Q"
                          "https://youtu.be/7CM7Ef-dPWQ"
                          "tom scott"))
#+END_SRC

See the docstring for more options.

*** Other ways to find feeds
You can use a web service like https://rssbox.herokuapp.com/, or look in the HTML of a Youtube channel page if you like your web browser's element inspector!

** II: Use Elfeed as usual
That's it. Assuming you've run =(elfeed-tube-setup)=, included in the above use-package block, there's nothing else to do.

If you're new to Elfeed, you can start with =M-x elfeed-search=.

In case the fetch for a Youtube entry fails you can call =M-x elfeed-tube-fetch= with a prefix argument (~C-u F~ or ~C-u M-x elf...~) to force a refetch.

** (Optional) For "Live" captions with MPV
For "live" following a video in Emacs you can turn on =elfeed-tube-mpv-follow-mode=, with (~C-c C-f~) in an Elfeed entry.

Note that this requires the =mpv= library to be installed, see the setup section.

** (Optional) View entries instead of auto-saving them
Not all Youtube videos contain gems of wisdom, to put it mildly. You may thus want to only /view/ video information instead of /adding/ it directly to the Elfeed database. This is especially salient since there's no (user-facing) way to delete items in Elfeed.

To do this you can set
#+BEGIN_SRC emacs-lisp
(setq elfeed-tube-save-to-db-p nil)
#+END_SRC

Now Youtube entries you view will feature a =[*NOT SAVED*]= marker:

The info will be cached for this Emacs session. You can persist an entry on disk by clicking on this marker, or with your =save-buffer= keybinding (typically ~C-x C-s~):

(You can change the marker style through =elfeed-tube-minimal-save-indicator-p= if you'd like a more subdued indicator.)

** (Optional) Fetch manually
Finally, you can also disable auto-fetching data and call =M-x elfeed-tube-fetch= (bound to ~F~) from an Elfeed Search or Show buffer to fetch selectively. To do this, remove =(elfeed-tube-setup)= from the setup code and replace it with

#+BEGIN_SRC emacs-lisp
(elfeed-tube-setup-no-fetch)
#+END_SRC

=elfeed-tube-fetch= will act on all entries in a selected region in an Elfeed Search buffer.

You can mix and match auto/manual fetching and auto/manual saving of entries to the Elfeed database.

* Customization
Elfeed-tube has opinionated defaults but is fully configurable through the Customize interface (=M-x customize=). Here are some examples:

** Disabling fields
Customize =elfeed-tube-metadata-fields=. To show only the duration and captions but no description or thumbnail:
#+BEGIN_SRC emacs-lisp
  ;; Other options:  thumbnail, description
  (setq elfeed-tube-metadata-fields '(duration captions))
#+END_SRC

** Customizing fields

*** Thumbnails
Control the size with =elfeed-tube-thumbnail-size=.
*** Captions
**** Languages
=elfeed-tube-captions-languages=: Language preference. The first available matching transcript will be fetched:
#+BEGIN_SRC emacs-lisp
  ;; Arabic or English or auto generated English captions
  (setq elfeed-tube-captions-languages
        '("ar" "en" "english (auto generated)"))
#+END_SRC
**** Sponsored segments
- =elfeed-tube-captions-sblock-p= controls whether sponsored segments of videos are de-emphasized in the transcript.
- =elfeed-tube-caption-faces=: Faces to use for different types of transcript segments.

** Persistence
Set the boolean =elfeed-tube-save-to-db-p= to =t= to automatically save fetched information to the Elfeed database.

The boolean =elfeed-tube-minimal-save-indicator-p= controls the style of indicator used to indicate unsaved content.

* FAQ
*** Do I need a Youtube API key to use this?
Not as of right now, it should *Just Work*.
*** Where does elfeed-tube get its data from?
Through a combination of sources:
- Scraping the Youtube video page
- Invidious instances that provide an API (dynamically found)
- The Sponsorblock API for crowd-sourced ad segment identification

Yes, this does mean that the fetcher code is going to need updating often. Them's the breaks.
*** Can I use the transcripts feature without using Elfeed?
(Or without adding the channel/playlist feed to my Elfeed-feeds)

Not at present. Elfeed-tube depends on Elfeed to do a lot of the lifting. If you're interested in creating a stand alone package from this please go ahead.
* Limitations
1. Elfeed provides only metadata, not full-text search acrosss your entries since it is (almost) a plain text database.
2. While Elfeed is an aggregator, Youtube RSS feeds only contain the last dozen or so videos from a channel. So you will only collect entries for videos from a little before when you subscribe to a channel's feed, unless you can find feeds that include older content.
3. There is no (user-facing) way to delete entries from an Elfeed database, so curate wisely! Note that my Elfeed database has about 32,000 entries across 272 feeds and it's very snappy so far.
4. Live transcript seeking and tracking can have an error of ±1 second.
5. Fetches can occasionally fail. If this happens you may need to call =M-x elfeed-tube-fetch= manually on an entry or selection of entries.
* Planned features
- [ ] Elfeed search keyword for video duration: ("=crafters <25min" should return videos from the "System Crafters" Youtube channel feed that are under 25 minutes long, etc.)
- [ ] Support for Youtube's official API
- [ ] Re-punctuating auto-generated captions using a punctuator2 web service
- [ ] =url-retrieve= support so Curl isn't needed
- [ ] Backporting to Emacs 26.x
  
** What about these Youtube features?
No support is currently planned for

- Search
- Video recommendations
- Comments
- Likes, +Dislikes+ and views

Elfeed-tube is *not* a Youtube client for Emacs. 

Instead, it plays to the strengths of RSS: to provide you with a regular digest of self-curated content in a more accessible way than otherwise possible. So search is not planned (see alternatives).

Video recommendations are sometimes useful for discovery, but in their current form they're designed primarily to keep you watching Youtube and often end in rabbit-holeing and doom spirals. Helping myself avoid these behaviors is an explicit goal of elfeed-tube!

The top comments are occasionally useful, especially on technical videos. I might add support for these in the future, although none are planned as of now.

* Alternatives
- For Youtube video search (including comments and ) from Emacs check out ytel.
-
* Acknowledgments
- Chris Wellons for writing Elfeed, the best feed reader I've ever used.
- Chris Wellons for also writing =aio=, the async wrapper for Emacs. It writes callbacks for me so I never have to.
- Ajay for writing and running Sponsorblock
- The folks maintaining Invidious instances.
